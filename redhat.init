#!/bin/bash
#
# supervisord   Startup script for the Supervisor process control system
#
# Author:       Mike McGrath <mmcgrath@redhat.com> (based off yumupdatesd)
#               Jason Koppe <jkoppe@indeed.com> adjusted to read sysconfig,
#                   use supervisord tools to start/stop, conditionally wait
#                   for child processes to shutdown, and startup later
#               Erwan Queffelec <erwan.queffelec@gmail.com>
#                   make script LSB-compliant
#
# chkconfig:    345 83 04
# description: Supervisor is a client/server system that allows \
#   its users to monitor and control a number of processes on \
#   UNIX-like operating systems.
# processname: supervisord
# config: /etc/supervisor/supervisord.conf
# pidfile: /var/run/supervisord.pid
#
### BEGIN INIT INFO
# Provides: supervisord
# Required-Start: $all
# Required-Stop: $all
# Short-Description: start and stop Supervisor process control system
# Description: Supervisor is a client/server system that allows
#   its users to monitor and control a number of processes on
#   UNIX-like operating systems.
### END INIT INFO

# Source function library
. /etc/rc.d/init.d/functions

# Path to the supervisorctl script, server binary,
# and short-form for messages.
SUPERVISORCTL=/usr/bin/supervisorctl
SUPERVISORD=/usr/bin/supervisord
PROG=supervisord
PIDFILE=/var/run/supervisord.pid
LOCKFILE=/var/lock/subsys/supervisord
STOP_TIMEOUT=60
OPTIONS="-c /etc/supervisor/supervisord.conf"
RETVAL=0

start() {
    echo -n $"Starting $PROG: "
    daemon --pidfile=${PIDFILE} $SUPERVISORD $OPTIONS -j $PIDFILE
    RETVAL=$?
    echo
    if [ $RETVAL -eq 0 ]; then
        touch ${LOCKFILE}
        $SUPERVISORCTL $OPTIONS status
    fi
    return $RETVAL
}

stop() {
    echo -n $"Stopping $PROG: "
    killproc -p ${PIDFILE} -d ${STOP_TIMEOUT} $SUPERVISORD
    RETVAL=$?
    echo
    [ $RETVAL -eq 0 ] && rm -rf ${LOCKFILE} ${PIDFILE}
}

reload() {
    echo -n $"Reloading $PROG: "
    LSB=1 killproc -p $PIDFILE $SUPERVISORD -HUP
    RETVAL=$?
    echo
    if [ $RETVAL -eq 7 ]; then
        failure $"$PROG reload"
    else
        $SUPERVISORCTL $OPTIONS status
    fi
}

restart() {
    stop
    start
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status -p ${PIDFILE} $SUPERVISORD
        RETVAL=$?
        [ $RETVAL -eq 0 ] && $SUPERVISORCTL $OPTIONS status
        ;;
    restart)
        restart
        ;;
    condrestart|try-restart)
        if status -p ${PIDFILE} $SUPERVISORD >&/dev/null; then
          stop
          start
        fi
        ;;
    force-reload|reload)
        reload
        ;;
    *)
        echo $"Usage: $PROG {start|stop|restart|condrestart|try-restart|force-reload|reload}"
        RETVAL=2
esac

exit $RETVAL
