#! /bin/sh
#
### BEGIN INIT INFO
# Provides:          supervisor
# Required-Start:    $remote_fs $network $named
# Required-Stop:     $remote_fs $network $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/stop supervisor
# Description:       Start/stop supervisor daemon and its configured
#                    subprocesses.
### END INIT INFO

. /lib/lsb/init-functions

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/local/bin/supervisord
SUPERVISORCTL=/usr/local/bin/supervisorctl
NAME=supervisord
DAEMON_OPTS="-c /etc/supervisor/supervisord.conf"

SCRIPT_OK=0
SCRIPT_ERROR=1
RETVAL=0

test -x $DAEMON || exit 0

PIDFILE=/var/run/$NAME.pid
DODTIME=5   # Time to wait for the server to die, in seconds
            # If this value is set too low you might not
            # let some servers to die gracefully and
            # 'restart' will not work

# Include supervisor defaults if available
if [ -f /etc/default/supervisor ] ; then
	. /etc/default/supervisor
fi

running_pid() {
    # Check if a given process pid's cmdline matches a given name
    pid=$1
    name=$2
    [ -z "$pid" ] && return 1
    [ ! -d /proc/$pid ] &&  return 1
    (cat /proc/$pid/cmdline | tr "\000" "\n"|grep -q $name) || return 1
    return 0
}

running() {
    # Check if the process is running looking at /proc
    # (works for all users)

    # No pidfile, probably no daemon present
    [ ! -f "$PIDFILE" ] && return 1
    # Obtain the pid and check it against the binary name
    pid=`cat $PIDFILE`
    running_pid $pid $DAEMON || return 1
    return 0
}

do_start() {
    log_daemon_msg "Starting $NAME: "

    if running ; then
        log_end_msg $SCRIPT_ERROR
        echo "$NAME is already running."
        RETVAL=0
    else
        start-stop-daemon --start --quiet --pidfile $PIDFILE \
            --startas $DAEMON -- $DAEMON_OPTS -j $PIDFILE
        test -f $PIDFILE || sleep 1
        if running ; then
            log_end_msg $SCRIPT_OK
            $SUPERVISORCTL $DAEMON_OPTS status
            RETVAL=0
        else
            log_end_msg $SCRIPT_ERROR
            RETVAL=1
        fi
    fi
}

do_stop() {
    log_daemon_msg "Stopping $NAME: "
    if running ; then
        start-stop-daemon --stop --quiet --oknodo --pidfile $PIDFILE
        log_end_msg $SCRIPT_OK
        RETVAL=0
    else
        log_end_msg $SCRIPT_ERROR
        echo "$NAME is not running."
        RETVAL=0
    fi
}

chk_status() {
    echo -n "$NAME is "
    if running ;  then
        echo "running."
        $SUPERVISORCTL $DAEMON_OPTS status
        RETVAL=0
    else
        echo "not running."
        RETVAL=0
    fi
}

case "$1" in
    start)
        do_start
	   ;;
    stop)
        do_stop
        ;;
    restart)
        do_stop
        do_start
        ;;
    status)
        chk_status
        ;;
    *)
        echo "Usage: /etc/init.d/$NAME {start|stop|restart|status}" >&2
        RETVAL=2
        ;;
esac

exit $RETVAL
